import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import csv
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn import svm
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import Perceptron
from sklearn.neural_network import MLPClassifier
from sklearn import decomposition
from sklearn import tree
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix
#2)
file=pd.read_csv("C:\\Users\\manue\\Desktop\\Manuel\\COMP 472\\Assignment 1\\drug200.csv")
print(file)
#3)
x=['drugA', 'drugB', 'drugC', 'drugX', 'drugY']
y=[0, 0, 0, 0, 0]
with open("C:\\Users\\manue\\Desktop\\Manuel\\COMP 472\\Assignment 1\\drug200.csv") as f:
    reader=csv.reader(f)
    for rows in reader:
        if(rows[5]=='drugA'):
            y[0]=y[0]+1
        if(rows[5]=='drugB'):
            y[1]=y[1]+1
        if(rows[5]=='drugC'):
            y[2]=y[2]+1
        if(rows[5]=='drugX'):
            y[3]=y[3]+1
        if(rows[5]=='drugY'):
            y[4]=y[4]+1   
print()
plt.bar(x, y, color = 'g', width = 0.5)
plt.xlabel('Drugs')
plt.ylabel('Instances')
plt.title('Drug distribution')
plt.show()
#4)
numFile=pd.get_dummies(file)
print(numFile)
category=pd.Categorical(numFile['Age'])

#5)
numFile_train, category_train, numFile_test, category_test=train_test_split(numFile, category, test_size=0.20)

#6)

#i)GaussianNB
gnb=GaussianNB()
gnb.fit(numFile, category)
#ii)Base-DT
dtc=DecisionTreeClassifier()
dtc.fit(numFile, category)
#iii)Top-DT
std_slc = StandardScaler()
pca = decomposition.PCA()
dec_tree = tree.DecisionTreeClassifier()
pipe = Pipeline(steps=[('std_slc', std_slc),
                           ('pca', pca),
                           ('dec_tree', dec_tree)])
n_components = list(range(1,X.shape[1]+1,1))
criterion = ['gini', 'entropy']
max_depth = [10,12]
parameters = dict(pca__n_components=n_components,
                      dec_tree__criterion=criterion,
                      dec_tree__max_depth=max_depth)
parameters = dict(pca__n_components=n_components,
                      dec_tree__criterion=criterion,
                      dec_tree__max_depth=max_depth) 
dtc_GS = GridSearchCV(pipe, parameters)
dtc_GS.fit(X, y)
#iv)PER
pct=Perceptron()
pct.fit(numFile, category)
#v)Base-MLP
clf = MLPClassifier(hidden_layer_sizes=(100), activation='logistic', solver='sgd')
#clf.fit(numFile, category)
print()